openapi: 3.0.0
info:
  title: MentorMe Mobile API Documentation
  version: 1.0.1
  description: API documentation for MentorMe Mobile backend - Nền tảng kết nối Mentor và Mentee
  contact:
    name: Nhóm 12 - Đồ án NT118
    email: 23521389@gm.uit.edu.vn

servers:
  - url: http://localhost:4000/api/v1
    description: Development server

tags:
  - name: Auth
    description: Xác thực người dùng (đăng ký, đăng nhập, đăng xuất)
  - name: Profile
    description: Onboarding hồ sơ người dùng (tạo hồ sơ bắt buộc theo role + upload avatar) - Chỉnh sửa, xem hồ sơ sẽ có sau
  - name: Availability
    description: Quản lý slot trống của mentor (tạo draft, publish một lần hoặc lặp RRULE, xem lịch công khai)

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  examples:
    calendar_success_min:
      summary: Calendar trong khoảng from/to (tối giản)
      value:
        success: true
        message: OK
        data:
          items:
            - _id: "000000000000000000000001"
              slot: "00000000000000000000A001"
              start: "2025-11-03T01:00:00Z"
              end: "2025-11-03T01:30:00Z"
              status: "open"

    calendar_400_min:
      summary: Calendar 400 khi from/to sai
      value:
        success: false
        message: "Invalid or missing from/to (ISO UTC expected)"
        data: null

  schemas:
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          example: Sign-in successful
        data:
          nullable: true
          description: Payload specific to the endpoint
      required: [message]

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Bad Request
        code:
          type: string
          description: Short machine-readable error key
          example: INVALID_INPUT
        errors:
          type: object
          additionalProperties: true
          description: Field-level validation details
        data:
          nullable: true
          example: null
      required: [message]

    SignUpMenteeRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: mentee1@example.com
        userName:
          type: string
          example: Alex
        password:
          type: string
          format: password
          example: strongPassword123
      required: [email, userName, password]

    SignUpMenteeResponseData:
      type: object
      properties:
        userId:
          type: string
          example: "665f1a9b3bcf9a4d0a2f1bcd"
        email:
          type: string
          format: email
        userName:
          type: string
        status:
          type: string
          enum: [pending, active]
          example: pending
        verificationId:
          type: string
          description: Identifier to use when verifying OTP
          example: "9f8a1ac51e4f4a609b2d2a3f4b3e7c12"
        expiresIn:
          type: integer
          description: OTP time to live in seconds
          example: 600
      required: [userId, email, userName, status, verificationId, expiresIn]

    SignUpMentorRequest:
      allOf:
        - $ref: "#/components/schemas/SignUpMenteeRequest"
      description: Same fields as mentee signup

    SignUpMentorResponseData:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
          format: email
        userName:
          type: string
        status:
          type: string
          enum: [pending-mentor]
          example: pending-mentor
        role:
          type: string
          enum: [mentor]
          example: mentor
      required: [userId, email, userName, status, role]

    SignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: mentee1@example.com
        password:
          type: string
          format: password
          example: strongPassword123
      required: [email, password]

    SignInResponseData:
      type: object
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [mentee, mentor, admin]
          example: mentee
        userId:
          type: string
        status:
          type: string
          enum: [active, pending, pending-mentor]
          example: active
        token:
          type: string
          description: JWT token (7d expiry)
      required: [email, role, userId, status]

    VerifyOtpRequest:
      type: object
      properties:
        verificationId:
          type: string
          example: "9f8a1ac51e4f4a609b2d2a3f4b3e7c12"
        code:
          type: string
          pattern: '^\\d{6}$'
          example: "123456"
      required: [verificationId, code]

    VerifyOtpResponseData:
      type: object
      properties:
        email:
          type: string
          format: email
        userId:
          type: string
        status:
          type: string
          enum: [active, pending-mentor]
        token:
          type: string
          nullable: true
          description: Present only when status becomes active (mentee flow)
      required: [email, userId, status]

    ProfileLinks:
      type: object
      properties:
        website: { type: string, format: uri }
        twitter: { type: string, format: uri }
        linkedin: { type: string, format: uri }
        github: { type: string, format: uri }
        youtube: { type: string, format: uri }
        facebook: { type: string, format: uri }

    Profile:
      type: object
      properties:
        _id: { type: string, example: "66e0c2...abc" }
        user: { type: string, example: "66e0c2...def" }
        # common
        location: { type: string, example: "Hồ Chí Minh" }
        category: { type: string, example: "Backend" }
        languages:
          type: array
          items: { type: string }
          example: ["vi", "en"]
        avatarUrl: { type: string, format: uri }
        avatarPublicId: { type: string }
        links:
          $ref: "#/components/schemas/ProfileLinks"
        profileCompleted: { type: boolean, example: true }
        # mentor
        jobTitle: { type: string, example: "Senior Software Engineer" }
        experience: { type: string, example: "5+ years" }
        headline: { type: string, example: "Mentor Node.js/MongoDB" }
        mentorReason: { type: string }
        greatestAchievement: { type: string }
        introVideo: { type: string, format: uri, nullable: true }
        bio: { type: string }
        # mentee
        description: { type: string }
        goal: { type: string }
        education: { type: string }
        # shared business
        skills:
          type: array
          items: { type: string }
          example: ["Node.js", "MongoDB"]
        rating:
          type: object
          properties:
            average: { type: number, format: float }
            count: { type: integer }
      required:
        [user, location, category, languages, avatarUrl, profileCompleted]

    CreateProfileCommonJSON:
      type: object
      properties:
        location: { type: string }
        category: { type: string }
        languages:
          oneOf:
            - type: array
              items: { type: string }
            - type: string
          description: "Mảng hoặc chuỗi CSV: 'vi,en'"
        avatarUrl:
          type: string
          format: uri
          description: "Link ảnh; server sẽ tải lên Cloudinary"
        links:
          $ref: "#/components/schemas/ProfileLinks"
      required: [location, category, languages, avatarUrl]

    CreateProfileMentorJSON:
      allOf:
        - $ref: "#/components/schemas/CreateProfileCommonJSON"
        - type: object
          properties:
            jobTitle: { type: string }
            experience: { type: string }
            headline: { type: string }
            mentorReason: { type: string }
            greatestAchievement: { type: string }
            skills:
              oneOf:
                - type: array
                  items: { type: string }
                - type: string
              description: "Mảng hoặc chuỗi CSV"
            bio: { type: string }
            introVideo: { type: string, format: uri, nullable: true }
          required:
            [
              jobTitle,
              experience,
              headline,
              mentorReason,
              greatestAchievement,
              skills,
            ]

    CreateProfileMenteeJSON:
      allOf:
        - $ref: "#/components/schemas/CreateProfileCommonJSON"
        - type: object
          properties:
            description: { type: string }
            goal: { type: string }
            education: { type: string }
            skills:
              oneOf:
                - type: array
                  items: { type: string }
                - type: string
              description: "Mảng hoặc chuỗi CSV"
          required: [description, goal, education, skills]

    CreateProfileCommonMultipart:
      type: object
      properties:
        avatar:
          type: string
          format: binary
          description: "File ảnh avatar (thay vì avatarUrl); có thể gửi cùng các field text"
        avatarUrl:
          type: string
          format: uri
          description: "Tuỳ chọn: nếu không upload file, có thể gửi URL"
        location: { type: string }
        category: { type: string }
        languages:
          type: string
          description: "Chuỗi CSV: 'vi,en' hoặc lặp key nhiều lần"
        links:
          $ref: "#/components/schemas/ProfileLinks"
      required: [location, category, languages] # cần avatar hoặc avatarUrl (ít nhất một)

    CreateProfileMentorMultipart:
      allOf:
        - $ref: "#/components/schemas/CreateProfileCommonMultipart"
        - type: object
          properties:
            jobTitle: { type: string }
            experience: { type: string }
            headline: { type: string }
            mentorReason: { type: string }
            greatestAchievement: { type: string }
            skills: { type: string, description: "CSV hoặc lặp key" }
            bio: { type: string }
            introVideo: { type: string, format: uri, nullable: true }
          required:
            [
              jobTitle,
              experience,
              headline,
              mentorReason,
              greatestAchievement,
              skills,
            ]

    CreateProfileMenteeMultipart:
      allOf:
        - $ref: "#/components/schemas/CreateProfileCommonMultipart"
        - type: object
          properties:
            description: { type: string }
            goal: { type: string }
            education: { type: string }
            skills: { type: string, description: "CSV hoặc lặp key" }
          required: [description, goal, education, skills]

    ValidationErrorWithMissing:
      type: object
      properties:
        message:
          type: string
          example: "Missing required fields for mentee: description, goal, education, skills"
        data:
          type: object
          properties:
            missing:
              type: array
              items: { type: string }
              example: ["description", "goal", "education", "skills"]
      required: [message]

    # ===== AVAILABILITY SCHEMAS =====
    AvailabilitySlot:
      type: object
      properties:
        _id: { type: string, example: "68e0fef4d73c9fd4063f958a" }
        mentor: { type: string, example: "68e0f6de7f19db9cfeb0df48" }
        title: { type: string, nullable: true }
        description: { type: string, nullable: true }
        timezone: { type: string, example: "Asia/Ho_Chi_Minh" }
        start: { type: string, format: date-time, nullable: true, description: "UTC ISO start (one-off hoặc anchor cho RRULE)" }
        end: { type: string, format: date-time, nullable: true, description: "UTC ISO end" }
        rrule: { type: string, nullable: true, example: "FREQ=WEEKLY;BYDAY=MO,TH;COUNT=8" }
        exdates:
          type: array
          items: { type: string, format: date-time }
          description: "Danh sách ngày giờ (UTC) loại trừ – phải trùng với các lần phát sinh của RRULE"
        bufferBeforeMin: { type: integer, example: 5 }
        bufferAfterMin: { type: integer, example: 10 }
        visibility: { type: string, enum: [public, private], example: public }
        status: { type: string, enum: [draft, published, archived], example: draft }
        publishHorizonDays: { type: integer, example: 45 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    AvailabilityOccurrence:
      type: object
      properties:
        _id: { type: string }
        slot: { type: string }
        mentor: { type: string }
        start: { type: string, format: date-time }
        end: { type: string, format: date-time }
        visibility: { type: string, enum: [public, private], example: public }
        status: { type: string, enum: [open, booked, closed], example: open }
        capacity: { type: integer, example: 1 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    CreateSlotRequest:
      type: object
      properties:
        timezone: { type: string, example: "Asia/Ho_Chi_Minh" }
        title: { type: string }
        description: { type: string }
        start: { type: string, format: date-time, description: "Bắt buộc (one-off hoặc anchor cho RRULE)" }
        end: { type: string, format: date-time, description: "Bắt buộc; phải sau start" }
        rrule: { type: string, nullable: true, description: "Chuỗi RRULE (DAILY/WEEKLY subset) hoặc bỏ trống" }
        exdates:
          type: array
          items: { type: string, format: date-time }
        bufferBeforeMin: { type: integer, minimum: 0, example: 0 }
        bufferAfterMin: { type: integer, minimum: 0, example: 0 }
        visibility: { type: string, enum: [public, private], example: public }
        publishHorizonDays: { type: integer, minimum: 1, maximum: 365, example: 90 }
      required: [timezone, start, end]

    CreateSlotResponse:
      type: object
      properties:
        message: { type: string, example: "Created" }
        slot:
          $ref: "#/components/schemas/AvailabilitySlot"
      required: [slot]

    PublishSlotResponse:
      type: object
      properties:
        published: { type: boolean, example: true }
        occurrencesCreated: { type: integer, example: 5 }
        skippedConflict: { type: integer, example: 1 }
        rrule: { type: string, nullable: true }
        horizonDays: { type: integer, example: 45 }

    CalendarItem:
      type: object
      properties:
        start: { type: string, format: date-time }
        end: { type: string, format: date-time }
        status: { type: string, enum: [open, booked, closed] }
        slot: { type: string }

    CalendarResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: "#/components/schemas/CalendarItem" }

    AvailabilityValidationErrorExample:
      type: object
      properties:
        message: { type: string, example: "Invalid RRULE format" }
        data: { type: null, nullable: true }

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Sign up as mentee (sends OTP)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpMenteeRequest"
      responses:
        "201":
          description: User created (pending) and OTP sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/SignUpMenteeResponseData"
        "400":
          description: Missing/invalid inputs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error (create user / send OTP failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/signup-mentor:
    post:
      tags: [Auth]
      summary: Sign up as mentor (application review flow)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpMentorRequest"
      responses:
        "201":
          description: Mentor application received
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/SignUpMentorResponseData"
        "400":
          description: Missing/invalid inputs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error (create user failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/signin:
    post:
      tags: [Auth]
      summary: Sign in with email & password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        "200":
          description: Sign-in successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/SignInResponseData"
        "400":
          description: Missing/invalid inputs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_fields:
                  value:
                    { message: "email and password are required", code: "MISSING_FIELDS", errors: { email: "required", password: "required" }, data: null }
        "401":
          description: Invalid email or password / inactive user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_credentials:
                  value: { message: "Invalid email or password", code: "INVALID_CREDENTIALS", data: null }
                inactive_user:
                  value: { message: "Account is not active", code: "USER_INACTIVE", data: null }

  /auth/verify-otp:
    post:
      tags: [Auth]
      summary: Verify email using OTP
      description: |
        Confirms the OTP that was sent via `/auth/signup`. Code paths:
        - **200 (Email verified)**:
          - Mentee: status becomes `active` and a JWT token is returned.
          - Mentor: status becomes `pending-mentor` (no token).
          - Already verified (active): returns status `active` (no token).
        - **400**: missing fields, invalid format, expired/missing OTP, invalid OTP, or too many attempts.
        - **404**: user not found.
        - **500**: failed to activate account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequest"
      responses:
        "200":
          description: Email verified / already verified
          content:
            application/json:
              examples:
                mentee_activated_with_token:
                  value:
                    message: Email verified
                    data:
                      email: mentee1@example.com
                      userId: "665f1a9b3bcf9a4d0a2f1bcd"
                      status: active
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                already_verified_no_token:
                  value:
                    message: Email already verified
                    data:
                      email: mentee1@example.com
                      userId: "665f1a9b3bcf9a4d0a2f1bcd"
                      status: active
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/VerifyOtpResponseData"
        "400":
          description: Invalid/expired OTP, invalid format, missing fields, or too many attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_fields: { value: { message: "verificationId and code are required", code: "MISSING_FIELDS", data: null } }
                invalid_format:  { value: { message: "Invalid OTP format (must be 6 digits)", code: "INVALID_FORMAT", data: null } }
                otp_not_found:  { value: { message: "OTP expired or not found", code: "OTP_NOT_FOUND", data: null } }
                invalid_otp:    { value: { message: "Invalid OTP", code: "INVALID_OTP", data: null } }
                too_many_attempts: { value: { message: "Too many attempts. Request a new OTP.", code: "RATE_LIMITED", data: null } }
        "404":
          description: User not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              examples:
                user_not_found: { value: { message: "User not found", code: "USER_NOT_FOUND", data: null } }
        "500":
          description: Failed to activate account
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              examples:
                activate_failed: { value: { message: "Failed to activate account", code: "INTERNAL_ERROR", data: null } }

  /auth/signout:
    post:
      tags: [Auth]
      summary: Sign out and blacklist current token until expiry
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Sign-out successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          description: Missing/invalid token (implementation may still return OK if token absent).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # ====== PROFILE ENDPOINT ======
  /profile/required:
    post:
      tags: [Profile]
      summary: Tạo hồ sơ bắt buộc (onboarding) theo role của user trong JWT
      description: |
        - **Yêu cầu Bearer JWT**. Role được lấy từ token (`mentee`/`mentor`).
        - **Bắt buộc chung**: `location`, `category`, `languages`, và **avatar** (gửi **file** `avatar` *hoặc* **URL** `avatarUrl`).
        - **Mentor bắt buộc**: `jobTitle`, `experience`, `headline`, `mentorReason`, `greatestAchievement`, `skills`.
        - **Mentee bắt buộc**: `description`, `goal`, `education`, `skills`.
        - `skills`/`languages` có thể gửi **mảng** hoặc **chuỗi CSV** (ví dụ: `"Node.js, MongoDB"` / `"vi,en"`).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateProfileMentorJSON"
                - $ref: "#/components/schemas/CreateProfileMenteeJSON"
            examples:
              mentor_json:
                summary: Mentor (JSON + avatarUrl)
                value:
                  location: "Hồ Chí Minh"
                  category: "Backend"
                  languages: "vi,en"
                  avatarUrl: "https://picsum.photos/512"
                  jobTitle: "Senior Backend Engineer"
                  experience: "5+ years"
                  headline: "Mentor Node.js/MongoDB"
                  mentorReason: "Muốn chia sẻ kinh nghiệm"
                  greatestAchievement: "Scale API cho 1M users"
                  skills: "Node.js, MongoDB"
                  bio: "Từng dẫn dắt team..."
              mentee_json:
                summary: Mentee (JSON + avatarUrl)
                value:
                  location: "Hồ Chí Minh"
                  category: "Backend"
                  languages: ["vi", "en"]
                  avatarUrl: "https://picsum.photos/512"
                  description: "Sinh viên năm 3 CNTT"
                  goal: "Pass phỏng vấn Backend"
                  education: "UIT"
                  skills: ["Node.js", "MongoDB"]
          multipart/form-data:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateProfileMentorMultipart"
                - $ref: "#/components/schemas/CreateProfileMenteeMultipart"
            examples:
              mentor_multipart:
                summary: Mentor (multipart + file avatar)
                value:
                  avatar: (file)
                  location: "Hồ Chí Minh"
                  category: "Backend"
                  languages: "vi,en"
                  jobTitle: "Senior Backend Engineer"
                  experience: "5+ years"
                  headline: "Mentor Node.js/MongoDB"
                  mentorReason: "Muốn chia sẻ kinh nghiệm"
                  greatestAchievement: "Scale API cho 1M users"
                  skills: "Node.js, MongoDB"
              mentee_multipart:
                summary: Mentee (multipart + file avatar)
                value:
                  avatar: (file)
                  location: "Hồ Chí Minh"
                  category: "Backend"
                  languages: "vi,en"
                  description: "Sinh viên năm 3 CNTT"
                  goal: "Pass phỏng vấn Backend"
                  education: "UIT"
                  skills: "Node.js, MongoDB"
      responses:
        "201":
          description: Tạo hồ sơ thành công
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Profile"
        "400":
          description: Thiếu/không hợp lệ (bao gồm thiếu avatar, thiếu field theo role, introVideo URL không hợp lệ)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorWithMissing"
                  - $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Chưa đăng nhập / token không hợp lệ
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "409":
          description: Hồ sơ đã tồn tại
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  # ===== AVAILABILITY ENDPOINTS =====
  /availability/slots:
    post:
      tags: [Availability]
      summary: Tạo slot (draft)
      description: |
        Mentor tạo slot dạng one-off hoặc recurring (RRULE). Sau khi tạo cần gọi publish để sinh occurrences.
        - Yêu cầu Bearer token với role mentor.
        - Hỗ trợ RRULE subset: FREQ=DAILY|WEEKLY; COUNT; INTERVAL; BYDAY (WEEKLY).
        - `start` / `end` luôn bắt buộc (anchor cho recurring).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateSlotRequest" }
            examples:
              one_off:
                summary: One-off 30 phút
                value:
                  timezone: Asia/Ho_Chi_Minh
                  title: "One-off mentoring"
                  start: "2025-11-03T07:00:00Z"
                  end: "2025-11-03T07:30:00Z"
                  bufferBeforeMin: 5
                  bufferAfterMin: 10
                  visibility: public
                  publishHorizonDays: 30
              weekly_rrule:
                summary: Weekly Mon/Thu (COUNT=8)
                value:
                  timezone: Asia/Ho_Chi_Minh
                  title: "Weekly mentoring"
                  start: "2025-11-03T07:00:00Z"
                  end: "2025-11-03T07:20:00Z"
                  rrule: "FREQ=WEEKLY;BYDAY=MO,TH;COUNT=8"
                  exdates: []
                  publishHorizonDays: 45
      responses:
        "201":
          description: Slot tạo thành công (draft)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSlotResponse"
        "400":
          description: Dữ liệu không hợp lệ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_rrule:
                  value:
                    message: "Invalid RRULE format"
                    code: INVALID_RRULE
                    data: null
                start_after_end:
                  value:
                    message: "start must be before end"
                    code: START_AFTER_END
                    data: null

        "401":
          description: Chưa đăng nhập hoặc token không hợp lệ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    message: "Unauthorized"
                    code: UNAUTHORIZED
                    data: null

        "403":
          description: Không có quyền (role không phải mentor)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                role_forbidden:
                  value:
                    message: "Only mentors can create availability"
                    code: FORBIDDEN
                    data: null


  /availability/slots/{id}/publish:
    post:
      tags: [Availability]
      summary: Publish slot (sinh occurrences)
      description: |
        - One-off: sinh 1 occurrence nếu không conflict.
        - Recurring (RRULE): sinh nhiều occurrences trong horizon (`publishHorizonDays`).
        - Xử lý conflict: occurrence bị đụng thời gian (kể cả buffer) sẽ bị bỏ qua và tăng `skippedConflict`.
        - Idempotent: publish lại slot đã published => trả message đã published.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Publish thành công / đã published trước đó
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PublishSlotResponse" }
              examples:
                one_off_created:
                  value:
                    published: true
                    occurrencesCreated: 1
                    skippedConflict: 0
                    rrule: null
                    horizonDays: 30
                one_off_conflict_soft_skip:
                  summary: Soft-skip khi trùng thời gian (không trả 409)
                  value:
                    published: true
                    occurrencesCreated: 0
                    skippedConflict: 1
                    rrule: null
                    horizonDays: 2
                recurring_created:
                  value:
                    published: true
                    occurrencesCreated: 8
                    skippedConflict: 1
                    rrule: "FREQ=WEEKLY;BYDAY=MO,TH;COUNT=8"
                    horizonDays: 45
                already_published:
                  summary: Idempotent publish trả counters 0/0
                  value:
                    published: true
                    occurrencesCreated: 0
                    skippedConflict: 0
                    rrule: null
                    horizonDays: 30
        "400":
          description: Slot thiếu start/end hoặc invalid RRULE
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              examples:
                missing_start_end: { value: { message: "Slot start/end is required", code: "MISSING_FIELDS", data: null } }
                invalid_rrule:     { value: { message: "Invalid RRULE format", code: "INVALID_RRULE", data: null } }
        "401":
          description: Chưa đăng nhập
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              examples:
                unauthorized: { value: { message: "Unauthorized", code: "UNAUTHORIZED", data: null } }
        "403":
          description: Không phải chủ sở hữu slot
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              examples:
                not_owner: { value: { message: "Not owner of slot", code: "FORBIDDEN", data: null } }
        "404":
          description: Slot không tồn tại
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              examples:
                slot_not_found: { value: { message: "Slot not found", code: "NOT_FOUND", data: null } }

  /availability/slots/publish-batch:
    post:
      tags: [Availability]
      summary: Publish nhiều slot cùng lúc (debug/test concurrency)
      description: |
        Nhận danh sách `ids` (slotId). Nếu `concurrent=true` thì chạy song song để mô phỏng publish đồng thời.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                concurrent:
                  type: boolean
                  default: false
            examples:
              sequential:
                value:
                  ids: ["68ec0000000000000000a001", "68ec0000000000000000a002"]
                  concurrent: false
              concurrent:
                value:
                  ids: ["68ec0000000000000000a001", "68ec0000000000000000a002"]
                  concurrent: true
      responses:
        "200":
          description: Kết quả publish từng slot
          content:
            application/json:
              schema:
                type: object
                properties:
                  mode:
                    type: string
                    enum: [sequential, concurrent]
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        ok: { type: boolean }
                        result:
                          oneOf:
                            - $ref: "#/components/schemas/PublishSlotResponse"
                            - type: object
                        error:
                          type: string
                          nullable: true

  /availability/calendar/{mentorId}:
    get:
      tags: [Availability]
      summary: Lịch public của mentor
      description: Trả về các occurrences mở (status=open, visibility=public) trong khoảng from/to.
      parameters:
        - in: path
          name: mentorId
          required: true
          schema: { type: string }
        - in: query
          name: from
          required: true
          schema: { type: string, format: date-time }
          examples:
            from_min:
              value: "2025-11-01T00:00:00Z"
        - in: query
          name: to
          required: true
          schema: { type: string, format: date-time }
          examples:
            to_min:
              value: "2025-11-10T00:00:00Z"
      responses:
        "200":
          description: Danh sách occurrences
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CalendarResponse" }
              examples:
                calendar_success_min:
                  $ref: "#/components/examples/calendar_success_min"
        "400":
          description: Thiếu hoặc sai định dạng from/to (ISO UTC) hoặc from >= to
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              examples:
                invalid_range:
                  value: { message: "Invalid or missing from/to (ISO UTC expected)", code: "INVALID_RANGE", data: null }
                calendar_400_min:
                  $ref: "#/components/examples/calendar_400_min"

security:
  - BearerAuth: []